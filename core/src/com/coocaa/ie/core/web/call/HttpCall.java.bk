//package com.coocaa.ie.core.web.call;
//
//import com.badlogic.gdx.Gdx;
//
//import java.io.IOException;
//import java.util.Map;
//import java.util.Set;
//import java.util.concurrent.ExecutorService;
//import java.util.concurrent.Executors;
//import java.util.concurrent.ThreadFactory;
//import java.util.concurrent.TimeUnit;
//
//import okhttp3.Interceptor;
//import okhttp3.OkHttpClient;
//import okhttp3.Request;
//import okhttp3.Response;
//import okhttp3.logging.HttpLoggingInterceptor;
//import retrofit2.Call;
//import retrofit2.Retrofit;
//import retrofit2.converter.fastjson.FastJsonConverterFactory;
//
//public abstract class HttpCall<T> {
//    private static final ExecutorService POOL = Executors.newFixedThreadPool(4, new ThreadFactory() {
//        private Thread.UncaughtExceptionHandler uncaughtExceptionHandler = new Thread.UncaughtExceptionHandler() {
//            @Override
//            public void uncaughtException(Thread thread, Throwable throwable) {
//                Gdx.app.error("HttpCall", "HttpCall uncaught exception on thread " + thread.getName(), throwable);
//            }
//        };
//
//        private int count = 0;
//
//        @Override
//        public Thread newThread(Runnable runnable) {
//            Thread t = new Thread(runnable, "httpcall_pool_thread_" + (count++));
//            t.setUncaughtExceptionHandler(uncaughtExceptionHandler);
//            return t;
//        }
//    });
//
//    interface Callback<T> {
//        void onSuccess(T data);
//
//        void onError(Throwable throwable);
//    }
//
//    public static final <T> void call(final Call<T> call, final Callback<T> callback) {
//        POOL.execute(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    T data = call.execute().body();
//                    if (callback != null)
//                        callback.onSuccess(data);
//                } catch (Throwable e) {
//                    Gdx.app.error("HttpCall", "HttpCall exception on thread " + Thread.currentThread().getName(), e);
//                    e.printStackTrace();
//                    if (callback != null)
//                        callback.onError(e);
//                }
//            }
//        });
//    }
//
//
//    public interface HeaderLoader {
//        Map<String, String> load();
//    }
//
//    private T http, https;
//    private OkHttpClient client;
//
//    private String url;
//    private HeaderLoader headerLoader;
//
//    public HttpCall(String url, HeaderLoader headerLoader) {
//        this.url = url;
//        this.headerLoader = headerLoader;
//        client = initClient();
//        http = init("http://");
//        https = init("https://");
//    }
//
//    private OkHttpClient initClient() {
//        OkHttpClient.Builder builder = new OkHttpClient.Builder();
//        builder.addInterceptor(new Interceptor() {
//            @Override
//            public Response intercept(Chain chain) throws IOException {
//                Request.Builder requestBuilder = chain.request().newBuilder();
//                if (headerLoader != null) {
//                    Map<String, String> headers = headerLoader.load();
//                    if (headers != null) {
//                        Set<String> keys = headers.keySet();
//                        for (String key : keys)
//                            requestBuilder.addHeader(key, headers.get(key));
//                    }
//                }
//                return chain.proceed(requestBuilder.build());
//            }
//        });
//        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
//        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
//        builder.addInterceptor(loggingInterceptor);
//        builder.connectTimeout(30, TimeUnit.SECONDS);
//        builder.readTimeout(30, TimeUnit.SECONDS);
//        builder.writeTimeout(30, TimeUnit.SECONDS);
//        return builder.build();
//    }
//
//    private T init(String prefix) {
//        String _url = url;
//        if (!(url.startsWith("http://") || url.startsWith("https://"))) {
//            _url = prefix + url;
//        }
//        Retrofit retrofit = new Retrofit.Builder()
//                .client(client)
//                .baseUrl(_url)
//                .addConverterFactory(FastJsonConverterFactory.create())
//                .build();
//        return retrofit.create(getCallClazz());
//    }
//
//    protected abstract Class<T> getCallClazz();
//
//    protected final T getHttp() {
//        return http;
//    }
//
//    protected final T getHttps() {
//        return https;
//    }
//}
